syntax = "proto3";

option go_package = "github.com/ray-project/kuberay/proto/go_client";
package proto;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";


option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  schemes: HTTP;
  responses: {
    key: "default";
    value: {
      schema: {
        json_schema: {
          ref: ".api.Status";
        }
      }
    }
  }
};

service ComputeTemplateService {
  // Creates a new compute template.
  rpc CreateComputeTemplate(CreateComputeTemplateRequest) returns (ComputeTemplate) {
    option (google.api.http) = {
      post: "/apis/v1alpha2/namespaces/{namespace}/compute_templates"
      body: "compute_template"
    };
  }

  // Finds a specific compute template by its name and namespace.
  rpc GetComputeTemplate(GetComputeTemplateRequest) returns (ComputeTemplate) {
    option (google.api.http) = {
      get: "/apis/v1alpha2/namespaces/{namespace}/compute_templates/{name}"
    };
  }

  // Finds all compute templates in a given namespace. Supports pagination, and sorting on certain fields.
  rpc ListComputeTemplates(ListComputeTemplatesRequest) returns (ListComputeTemplatesResponse) {
    option (google.api.http) = {
      get: "/apis/v1alpha2/namespaces/{namespace}/compute_templates"
    };
  }

  // Finds all compute templates in all namespaces. Supports pagination, and sorting on certain fields.
  rpc ListAllComputeTemplates(ListAllComputeTemplatesRequest) returns (ListAllComputeTemplatesResponse) {
    option (google.api.http) = {
      get: "/apis/v1alpha2/compute_templates"
    };
  }

  // Deletes a compute template by its name and namespace 
  rpc DeleteComputeTemplate(DeleteComputeTemplateRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/apis/v1alpha2/namespaces/{namespace}/compute_templates/{name}"
    };
  }
}

message CreateComputeTemplateRequest {
  // The compute template to be created.
  ComputeTemplate compute_template = 1;
  // The namespace of the compute template to be created
  string namespace = 2;
}

message GetComputeTemplateRequest {
  // The name of the ComputeTemplate to be retrieved.
  string name = 1;
  // The namespace of the compute template to be retrieved.
  string namespace = 2;
}

message ListComputeTemplatesRequest {
  // The namespace of the compute templates to be retrieved. 
  string namespace = 1;
  // TODO: support paganation later
}

message ListComputeTemplatesResponse {
  repeated ComputeTemplate compute_templates = 1;
}

message ListAllComputeTemplatesRequest {
  // TODO: support paganation later
}

message ListAllComputeTemplatesResponse {
  repeated ComputeTemplate compute_templates = 1;
}

message DeleteComputeTemplateRequest {
  // The name of the compute template to be deleted.
  string name = 1;
  // The namespace of the compute template to be deleted.
  string namespace = 2;
}

// ComputeTemplate can be reused by any compute units like worker group, workspace, image build job, etc
message ComputeTemplate {
  // The name of the compute template
  string name = 1;
  // The namespace of the compute template
  string namespace = 2;
  // Number of cpus
  uint32 cpu = 3;
  // Number of memory
  uint32 memory = 4;
  // Number of gpus
  uint32 gpu = 5;
  // The detail gpu accelerator type
  string gpu_accelerator = 6;
}


service ImageTemplateService {
  // Creates a new ImageTemplate.
  rpc CreateImageTemplate(CreateImageTemplateRequest) returns (ImageTemplate) {
    option (google.api.http) = {
      post: "/apis/v1alpha2/image_templates"
      body: "image_template"
    };
  }

  // Finds a specific ImageTemplate by ID.
  rpc GetImageTemplate(GetImageTemplateRequest) returns (ImageTemplate) {
    option (google.api.http) = {
      get: "/apis/v1alpha2/namespaces/{namespace}/image_templates/{name}"
    };
  }

  // Finds all ImageTemplates. Supports pagination, and sorting on certain fields.
  rpc ListImageTemplates(ListImageTemplatesRequest) returns (ListImageTemplatesResponse) {
    option (google.api.http) = {
      get: "/apis/v1alpha2/namespaces/{namespace}/image_templates"
    };
  }

  // Deletes an ImageTemplate.
  rpc DeleteImageTemplate(DeleteImageTemplateRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/apis/v1alpha2/namespaces/{namespace}/image_templates/{name}"
    };
  }
}

message CreateImageTemplateRequest {
  // The image template to be created.
  ImageTemplate image_template = 1;
  // The namespace of the image template to be created.
  string namespace = 2;
}

message GetImageTemplateRequest {
  // The name of the image template to be retrieved.
  string name = 1;
  // The namespace of the image template to be retrieved.
  string namespace = 2;
}

message ListImageTemplatesRequest {
  // The namespace of the image templates to be retrieved.
  string namespace = 1;
  // TODO: support pagingation later
}

message ListImageTemplatesResponse {
  // A list of Compute returned.
  repeated ImageTemplate image_templates = 1;
}

message ListAllImageTemplatesRequest {
  // TODO: support pagingation later
}

message ListAllImageTemplatesResponse {
  // A list of Compute returned.
  repeated ImageTemplate image_templates = 1;
}

message DeleteImageTemplateRequest {
  // The name of the image template to be deleted.
  string name = 1;
  // The namespace of the image template to be deleted.
  string namespace = 2;
}

// ImageTemplate can be used by worker group and workspce.
// They can be distinguish by different entrypoints
message ImageTemplate {
  // The ID of the image template
  string name = 1;
  // The namespace of the image template
  string namespace = 2;
  // The base container image to be used for image building
  string base_image = 3;
  // The pip packages to install
  repeated string pip_packages = 4;
  // The conda packages to install
  repeated string conda_packages = 5;
  // The system packages to install
  repeated string system_packages = 6;
  // The environment variables to set
  map<string, string> environment_variables = 7;
  // The post install commands to execute
  string custom_commands = 8;
  // Output. The result image generated
  string image = 9;
}
